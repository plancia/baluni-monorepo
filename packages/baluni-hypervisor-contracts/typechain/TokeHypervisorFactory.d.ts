/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TokeHypervisorFactoryInterface extends ethers.utils.Interface {
  functions: {
    "allHypervisors(uint256)": FunctionFragment;
    "allHypervisorsLength()": FunctionFragment;
    "createHypervisor(address,address,uint24,string,string)": FunctionFragment;
    "getHypervisor(address,address,uint24)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV3Factory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allHypervisors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allHypervisorsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createHypervisor",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHypervisor",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Factory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allHypervisors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allHypervisorsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHypervisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypervisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Factory",
    data: BytesLike
  ): Result;

  events: {
    "HypervisorCreated(address,address,uint24,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HypervisorCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type HypervisorCreatedEvent = TypedEvent<
  [string, string, number, string, BigNumber] & {
    token0: string;
    token1: string;
    fee: number;
    hypervisor: string;
    arg4: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class TokeHypervisorFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokeHypervisorFactoryInterface;

  functions: {
    allHypervisors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allHypervisorsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createHypervisor(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getHypervisor(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;
  };

  allHypervisors(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allHypervisorsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createHypervisor(
    tokenA: string,
    tokenB: string,
    fee: BigNumberish,
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getHypervisor(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allHypervisors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allHypervisorsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createHypervisor(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getHypervisor(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "HypervisorCreated(address,address,uint24,address,uint256)"(
      token0?: null,
      token1?: null,
      fee?: null,
      hypervisor?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, string, number, string, BigNumber],
      {
        token0: string;
        token1: string;
        fee: number;
        hypervisor: string;
        arg4: BigNumber;
      }
    >;

    HypervisorCreated(
      token0?: null,
      token1?: null,
      fee?: null,
      hypervisor?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, string, number, string, BigNumber],
      {
        token0: string;
        token1: string;
        fee: number;
        hypervisor: string;
        arg4: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    allHypervisors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allHypervisorsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createHypervisor(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getHypervisor(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allHypervisors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allHypervisorsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createHypervisor(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getHypervisor(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
