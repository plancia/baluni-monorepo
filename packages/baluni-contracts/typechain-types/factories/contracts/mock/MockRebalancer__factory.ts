/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockRebalancer,
  MockRebalancerInterface,
} from "../../../contracts/mock/MockRebalancer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "usdt",
        type: "address",
      },
      {
        internalType: "address",
        name: "_usdc",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wmatic",
        type: "address",
      },
      {
        internalType: "address",
        name: "weth",
        type: "address",
      },
      {
        internalType: "address",
        name: "wbtc",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC_TO_USDT_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC_TO_WBTC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC_TO_WETH_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC_TO_WMATIC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDT_TO_USDC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDT_TO_WBTC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDT_TO_WETH_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDT_TO_WMATIC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WBTC_TO_USDC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WBTC_TO_USDT_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WBTC_TO_WETH_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WBTC_TO_WMATIC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH_TO_USDC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH_TO_USDT_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH_TO_WBTC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH_TO_WMATIC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WMATIC_TO_USDC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WMATIC_TO_USDT_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WMATIC_TO_WBTC_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WMATIC_TO_WETH_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WNATIVE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    name: "checkRebalance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBaluniRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "toToken",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "getRateToEth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTreasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rates",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rebalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "setRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_treasury",
        type: "address",
      },
    ],
    name: "setTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346100335761001d610014610130565b9392909261064f565b610025610038565b6114a66109e582396114a690f35b61003e565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006a90610042565b810190811060018060401b0382111761008257604052565b61004c565b9061009a610093610038565b9283610060565b565b5f80fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b5f80fd5b905051906100d8826100b7565b565b919060a08382031261012b576100f2815f85016100cb565b9261010082602083016100cb565b9261012861011184604085016100cb565b9361011f81606086016100cb565b936080016100cb565b90565b61009c565b61014e611e8b8038038061014381610087565b9283398101906100da565b9091929394565b5f1b90565b9061016b60018060a01b0391610155565b9181191691161790565b90565b61018c610187610191926100a0565b610175565b6100a0565b90565b61019d90610178565b90565b6101a990610194565b90565b90565b906101c46101bf6101cb926101a0565b6101ac565b825461015a565b9055565b90565b90565b6101e96101e46101ee926101cf565b610175565b6101d2565b90565b610202670ddc9893b8f693316101d5565b90565b9061020f906101a0565b5f5260205260405f2090565b5f1c90565b60018060a01b031690565b61023761023c9161021b565b610220565b90565b610249905461022b565b90565b90610256906101a0565b5f5260205260405f2090565b9061026e5f1991610155565b9181191691161790565b61028c610287610291926101d2565b610175565b6101d2565b90565b90565b906102ac6102a76102b392610278565b610294565b8254610262565b9055565b90565b6102ce6102c96102d3926102b7565b610175565b6101d2565b90565b6102ec6c110f11bc46bc3efcc5b8ff12236102ba565b90565b90565b61030661030161030b926102ef565b610175565b6101d2565b90565b61031e66052de6f3e9958f6102f2565b90565b90565b61033861033361033d92610321565b610175565b6101d2565b90565b6103546ad47d67cce9223fad7de347610324565b90565b90565b61036e61036961037392610357565b610175565b6101d2565b90565b6103886824efc5d2223b2ab2b261035a565b90565b90565b6103a261039d6103a79261038b565b610175565b6101d2565b90565b6103c16d2d9856fc421a9fd095f8b44c49db61038e565b90565b90565b6103db6103d66103e0926103c4565b610175565b6101d2565b90565b6103f5682506936e734ac2f9266103c7565b90565b90565b61040f61040a610414926103f8565b610175565b6101d2565b90565b61042d6c0236febc16a26943df322289be6103fb565b90565b90565b61044761044261044c92610430565b610175565b6101d2565b90565b610460670de435a2a433cf48610433565b90565b90565b61047a61047561047f92610463565b610175565b6101d2565b90565b610492660533304f826d31610466565b90565b90565b6104ac6104a76104b192610495565b610175565b6101d2565b90565b6104ca6c110dcba2e6f97b2a41a7eba1b8610498565b90565b90565b6104e46104df6104e9926104cd565b610175565b6101d2565b90565b6105006ad4801858112018c8850bae6104d0565b90565b90565b61051a61051561051f92610503565b610175565b6101d2565b90565b61052d610438610506565b90565b90565b61054761054261054c92610530565b610175565b6101d2565b90565b61055e65ac76a57eb9a4610533565b90565b90565b61057861057361057d92610561565b610175565b6101d2565b90565b61058c620b32d1610564565b90565b90565b6105a66105a16105ab9261058f565b610175565b6101d2565b90565b6105ba620b68f7610592565b90565b90565b6105d46105cf6105d9926105bd565b610175565b6101d2565b90565b6105ef69011de1930ce9ab44b5a16105c0565b90565b90565b61060961060461060e926105f2565b610175565b6101d2565b90565b61061e63e163500a6105f5565b90565b90565b61063861063361063d92610621565b610175565b6101d2565b90565b61064c6254dddd610624565b90565b6109c6906106706109e296936106696109dd9660026101af565b60016101af565b61067b3360036101af565b6106a96106866101f1565b6106a46106945f8590610205565b61069e600161023f565b9061024c565b610297565b6106d76106b46102d6565b6106d26106c25f8590610205565b6106cc600261023f565b9061024c565b610297565b6106fc6106e261030e565b6106f76106f05f8590610205565b869061024c565b610297565b610721610707610340565b61071c6107155f8590610205565b889061024c565b610297565b61074661072c610376565b61074161073a5f8790610205565b849061024c565b610297565b6107746107516103aa565b61076f61075f5f8790610205565b610769600261023f565b9061024c565b610297565b6107a261077f6103e3565b61079d61078d5f8790610205565b610797600161023f565b9061024c565b610297565b6107c76107ad610417565b6107c26107bb5f8790610205565b889061024c565b610297565b6107f56107d261044f565b6107f06107e95f6107e3600161023f565b90610205565b849061024c565b610297565b610823610800610482565b61081e6108175f610811600161023f565b90610205565b869061024c565b610297565b61085a61082e6104b4565b6108556108455f61083f600161023f565b90610205565b61084f600261023f565b9061024c565b610297565b6108886108656104ec565b61088361087c5f610876600161023f565b90610205565b889061024c565b610297565b6108b6610893610522565b6108b16108aa5f6108a4600261023f565b90610205565b869061024c565b610297565b6108e46108c161054f565b6108df6108d85f6108d2600261023f565b90610205565b889061024c565b610297565b61091b6108ef610580565b6109166109065f610900600261023f565b90610205565b610910600161023f565b9061024c565b610297565b6109496109266105ae565b61094461093d5f610937600261023f565b90610205565b849061024c565b610297565b6109776109546105dc565b6109726109625f8990610205565b61096c600261023f565b9061024c565b610297565b6109a5610982610611565b6109a06109905f8990610205565b61099a600161023f565b9061024c565b610297565b6109c16109b0610611565b916109bc5f8890610205565b61024c565b610297565b6109d86109d1610640565b935f610205565b61024c565b610297565b56fe60806040526004361015610013575b611265565b61001d5f3561021c565b8063020987191461021757806304cc7325146102125780630e0917621461020d578063187029b81461020857806318cdc49a146102035780631a1e4a1f146101fe5780633b19e84a146101f95780634039e687146101f457806343146399146101ef578063443dc789146101ea5780635107e94e146101e557806353ff493e146101e05780635911fb9a146101db5780635fc8cd69146101d657806361d027b3146101d15780637b0cf44d146101cc5780637de4fd10146101c7578063802431fb146101c257806384db1dfb146101bd57806389a30271146101b85780638e5139ed146101b357806397db8e02146101ae578063a58a7f8a146101a9578063ae3bcc96146101a4578063b381cf401461019f578063b537d24b1461019a578063b9e9381014610195578063c018498314610190578063d135e3be1461018b578063e2338e7214610186578063e30f6892146101815763f0f442600361000e57611232565b6111df565b61116a565b6110f4565b611080565b611012565b610f9a565b610f27565b610ee3565b610e72565b610dff565b610d8d565b610d14565b610cd3565b610c17565b610ba7565b610af2565b6109e7565b61096e565b610900565b610846565b6107d2565b61075a565b6106e4565b610676565b610607565b6105d2565b610553565b6103ed565b610380565b610312565b6102a4565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261023a57565b61022c565b90565b90565b90565b61025c6102576102619261023f565b610245565b610242565b90565b610274660533304f826d31610248565b90565b61027f610264565b90565b61028b90610242565b9052565b91906102a2905f60208501940190610282565b565b346102d4576102b4366004610230565b6102d06102bf610277565b6102c7610222565b9182918261028f565b0390f35b610228565b60018060a01b031690565b6102ed906102d9565b90565b6102f9906102e4565b9052565b9190610310905f602085019401906102f0565b565b3461034257610322366004610230565b61033e61032d611298565b610335610222565b918291826102fd565b0390f35b610228565b90565b61035e61035961036392610347565b610245565b610242565b90565b610372620b68f761034a565b90565b61037d610366565b90565b346103b057610390366004610230565b6103ac61039b610375565b6103a3610222565b9182918261028f565b0390f35b610228565b90565b6103cc6103c76103d1926103b5565b610245565b610242565b90565b6103df6104386103b8565b90565b6103ea6103d4565b90565b3461041d576103fd366004610230565b6104196104086103e2565b610410610222565b9182918261028f565b0390f35b610228565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561046a5781359160018060401b03831161046557602001926020830284011161046057565b61042e565b61042a565b610426565b909182601f830112156104a75781359160018060401b0383116104a257602001926020830284011161049d57565b61042e565b61042a565b610426565b90606082820312610527575f82013560018060401b03811161052257816104d4918401610432565b929093602082013560018060401b03811161051d57836104f591840161046f565b929093604082013560018060401b03811161051857610514920161046f565b9091565b610422565b610422565b610422565b61022c565b151590565b61053a9061052c565b9052565b9190610551905f60208501940190610531565b565b3461058a576105866105756105693660046104ac565b949390939291926112b1565b61057d610222565b9182918261053e565b0390f35b610228565b90565b6105a66105a16105ab9261058f565b610245565b610242565b90565b6105c46c110f11bc46bc3efcc5b8ff1223610592565b90565b6105cf6105ae565b90565b34610602576105e2366004610230565b6105fe6105ed6105c7565b6105f5610222565b9182918261028f565b0390f35b610228565b3461063757610617366004610230565b6106336106226112eb565b61062a610222565b918291826102fd565b0390f35b610228565b90565b61065361064e6106589261063c565b610245565b610242565b90565b61066863e163500a61063f565b90565b61067361065b565b90565b346106a657610686366004610230565b6106a261069161066b565b610699610222565b9182918261028f565b0390f35b610228565b90565b6106c26106bd6106c7926106ab565b610245565b610242565b90565b6106d66254dddd6106ae565b90565b6106e16106ca565b90565b34610714576106f4366004610230565b6107106106ff6106d9565b610707610222565b9182918261028f565b0390f35b610228565b90565b61073061072b61073592610719565b610245565b610242565b90565b61074c6ad47d67cce9223fad7de34761071c565b90565b610757610738565b90565b3461078a5761076a366004610230565b61078661077561074f565b61077d610222565b9182918261028f565b0390f35b610228565b90565b6107a66107a16107ab9261078f565b610245565b610242565b90565b6107c46c110dcba2e6f97b2a41a7eba1b8610792565b90565b6107cf6107ae565b90565b34610802576107e2366004610230565b6107fe6107ed6107c7565b6107f5610222565b9182918261028f565b0390f35b610228565b90565b61081e61081961082392610807565b610245565b610242565b90565b610838682506936e734ac2f92661080a565b90565b610843610826565b90565b3461087657610856366004610230565b61087261086161083b565b610869610222565b9182918261028f565b0390f35b610228565b610884816102e4565b0361088b57565b5f80fd5b9050359061089c8261087b565b565b6108a781610242565b036108ae57565b5f80fd5b905035906108bf8261089e565b565b90916060828403126108f6576108f36108dc845f850161088f565b936108ea816020860161088f565b936040016108b2565b90565b61022c565b5f0190565b3461092f576109196109133660046108c1565b9161135b565b610921610222565b8061092b816108fb565b0390f35b610228565b90565b61094b61094661095092610934565b610245565b610242565b90565b61096063df77b36f610937565b90565b61096b610953565b90565b3461099e5761097e366004610230565b61099a610989610963565b610991610222565b9182918261028f565b0390f35b610228565b1c90565b60018060a01b031690565b6109c29060086109c793026109a3565b6109a7565b90565b906109d591546109b2565b90565b6109e460035f906109ca565b90565b34610a17576109f7366004610230565b610a13610a026109d8565b610a0a610222565b918291826102fd565b0390f35b610228565b9190604083820312610a445780610a38610a41925f860161088f565b9360200161088f565b90565b61022c565b610a5d610a58610a62926102d9565b610245565b6102d9565b90565b610a6e90610a49565b90565b610a7a90610a65565b90565b90610a8790610a71565b5f5260205260405f2090565b90610a9d90610a71565b5f5260205260405f2090565b90565b610abc906008610ac193026109a3565b610aa9565b90565b90610acf9154610aac565b90565b610aea610aef92610ae55f935f94610a7d565b610a93565b610ac4565b90565b34610b2357610b1f610b0e610b08366004610a1c565b90610ad2565b610b16610222565b9182918261028f565b0390f35b610228565b610b31906102e4565b90565b610b3d81610b28565b03610b4457565b5f80fd5b90503590610b5582610b34565b565b610b608161052c565b03610b6757565b5f80fd5b90503590610b7882610b57565b565b9190604083820312610ba25780610b96610b9f925f8601610b48565b93602001610b6b565b90565b61022c565b34610bd857610bd4610bc3610bbd366004610b7a565b906113ab565b610bcb610222565b9182918261028f565b0390f35b610228565b9091606082840312610c1257610c0f610bf8845f8501610b48565b93610c068160208601610b48565b93604001610b6b565b90565b61022c565b34610c4857610c44610c33610c2d366004610bdd565b916113e8565b610c3b610222565b9182918261028f565b0390f35b610228565b909160a082840312610cce575f82013560018060401b038111610cc95783610c76918401610432565b929093602082013560018060401b038111610cc45781610c9791840161046f565b929093610cc1610caa846040850161088f565b93610cb8816060860161088f565b936080016108b2565b90565b610422565b610422565b61022c565b34610d0057610ce3366004610c4d565b50505050505050610cf2610222565b80610cfc816108fb565b0390f35b610228565b610d1160015f906109ca565b90565b34610d4457610d24366004610230565b610d40610d2f610d05565b610d37610222565b918291826102fd565b0390f35b610228565b90565b610d60610d5b610d6592610d49565b610245565b610242565b90565b610d7f6d2d9856fc421a9fd095f8b44c49db610d4c565b90565b610d8a610d68565b90565b34610dbd57610d9d366004610230565b610db9610da8610d82565b610db0610222565b9182918261028f565b0390f35b610228565b90565b610dd9610dd4610dde92610dc2565b610245565b610242565b90565b610df166052de6f3e9958f610dc5565b90565b610dfc610de1565b90565b34610e2f57610e0f366004610230565b610e2b610e1a610df4565b610e22610222565b9182918261028f565b0390f35b610228565b90565b610e4b610e46610e5092610e34565b610245565b610242565b90565b610e64670ddc9893b8f69331610e37565b90565b610e6f610e53565b90565b34610ea257610e82366004610230565b610e9e610e8d610e67565b610e95610222565b9182918261028f565b0390f35b610228565b90565b610ebe610eb9610ec392610ea7565b610245565b610242565b90565b610ed565ac76a57eb9a4610eaa565b90565b610ee0610ec6565b90565b34610f1357610ef3366004610230565b610f0f610efe610ed8565b610f06610222565b9182918261028f565b0390f35b610228565b610f2460025f906109ca565b90565b34610f5757610f37366004610230565b610f53610f42610f18565b610f4a610222565b918291826102fd565b0390f35b610228565b90565b610f73610f6e610f7892610f5c565b610245565b610242565b90565b610f8c670de435a2a433cf48610f5f565b90565b610f97610f7b565b90565b34610fca57610faa366004610230565b610fc6610fb5610f8f565b610fbd610222565b9182918261028f565b0390f35b610228565b90565b610fe6610fe1610feb92610fcf565b610245565b610242565b90565b6110046c0236febc16a26943df322289be610fd2565b90565b61100f610fee565b90565b3461104257611022366004610230565b61103e61102d611007565b611035610222565b9182918261028f565b0390f35b610228565b90565b61105e61105961106392611047565b610245565b610242565b90565b611072620b32d161104a565b90565b61107d611066565b90565b346110b057611090366004610230565b6110ac61109b611075565b6110a3610222565b9182918261028f565b0390f35b610228565b90565b6110cc6110c76110d1926110b5565b610245565b610242565b90565b6110e66824efc5d2223b2ab2b26110b8565b90565b6110f16110d4565b90565b3461112457611104366004610230565b61112061110f6110e9565b611117610222565b9182918261028f565b0390f35b610228565b90565b61114061113b61114592611129565b610245565b610242565b90565b61115c6ad4801858112018c8850bae61112c565b90565b611167611148565b90565b3461119a5761117a366004610230565b61119661118561115f565b61118d610222565b9182918261028f565b0390f35b610228565b90565b6111b66111b16111bb9261119f565b610245565b610242565b90565b6111d169011de1930ce9ab44b5a16111a2565b90565b6111dc6111be565b90565b3461120f576111ef366004610230565b61120b6111fa6111d4565b611202610222565b9182918261028f565b0390f35b610228565b9060208282031261122d5761122a915f0161088f565b90565b61022c565b346112605761124a611245366004611214565b611463565b611252610222565b8061125c816108fb565b0390f35b610228565b5f80fd5b5f90565b90565b61128461127f6112899261126d565b610245565b6102d9565b90565b61129590611270565b90565b6112a0611269565b506112aa5f61128c565b90565b5f90565b5050505050506112bf6112ad565b50600190565b5f1c90565b6112d66112db916112c5565b6109a7565b90565b6112e890546112ca565b90565b6112f3611269565b506112fe60036112de565b90565b5f1b90565b906113125f1991611301565b9181191691161790565b61133061132b61133592610242565b610245565b610242565b90565b90565b9061135061134b6113579261131c565b611338565b8254611306565b9055565b906113739061136e61137894935f610a7d565b610a93565b61133b565b565b5f90565b61138790610a65565b90565b61139661139b916112c5565b610aa9565b90565b6113a8905461138a565b90565b6113e591506113d06113e0916113bf61137a565b506113ca5f9161137e565b90610a7d565b6113da60026112de565b90610a93565b61139e565b90565b61142292509061141761141161141d9361140061137a565b5061140b5f9161137e565b90610a7d565b9161137e565b90610a93565b61139e565b90565b9061143660018060a01b0391611301565b9181191691161790565b90565b9061145861145361145f92610a71565b611440565b8254611425565b9055565b61146e906003611443565b56fea2646970667358221220b6010e790e831fd2d1a8e1bb7c3a7f6ce673b147444ade0748257fc935b88e3064736f6c63430008190033";

type MockRebalancerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRebalancerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRebalancer__factory extends ContractFactory {
  constructor(...args: MockRebalancerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    usdt: AddressLike,
    _usdc: AddressLike,
    _wmatic: AddressLike,
    weth: AddressLike,
    wbtc: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      usdt,
      _usdc,
      _wmatic,
      weth,
      wbtc,
      overrides || {}
    );
  }
  override deploy(
    usdt: AddressLike,
    _usdc: AddressLike,
    _wmatic: AddressLike,
    weth: AddressLike,
    wbtc: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      usdt,
      _usdc,
      _wmatic,
      weth,
      wbtc,
      overrides || {}
    ) as Promise<
      MockRebalancer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockRebalancer__factory {
    return super.connect(runner) as MockRebalancer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRebalancerInterface {
    return new Interface(_abi) as MockRebalancerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockRebalancer {
    return new Contract(address, _abi, runner) as unknown as MockRebalancer;
  }
}
