/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockRebalancerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "USDC"
      | "USDC_TO_USDT_RATE"
      | "USDC_TO_WBTC_RATE"
      | "USDC_TO_WETH_RATE"
      | "USDC_TO_WMATIC_RATE"
      | "USDT_TO_USDC_RATE"
      | "USDT_TO_WBTC_RATE"
      | "USDT_TO_WETH_RATE"
      | "USDT_TO_WMATIC_RATE"
      | "WBTC_TO_USDC_RATE"
      | "WBTC_TO_USDT_RATE"
      | "WBTC_TO_WETH_RATE"
      | "WBTC_TO_WMATIC_RATE"
      | "WETH_TO_USDC_RATE"
      | "WETH_TO_USDT_RATE"
      | "WETH_TO_WBTC_RATE"
      | "WETH_TO_WMATIC_RATE"
      | "WMATIC_TO_USDC_RATE"
      | "WMATIC_TO_USDT_RATE"
      | "WMATIC_TO_WBTC_RATE"
      | "WMATIC_TO_WETH_RATE"
      | "WNATIVE"
      | "checkRebalance"
      | "getBaluniRouter"
      | "getRate"
      | "getRateToEth"
      | "getTreasury"
      | "rates"
      | "rebalance"
      | "setRate"
      | "setTreasury"
      | "treasury"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "USDC_TO_USDT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_TO_WBTC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_TO_WETH_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_TO_WMATIC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_TO_USDC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_TO_WBTC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_TO_WETH_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_TO_WMATIC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WBTC_TO_USDC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WBTC_TO_USDT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WBTC_TO_WETH_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WBTC_TO_WMATIC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_TO_USDC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_TO_USDT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_TO_WBTC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_TO_WMATIC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WMATIC_TO_USDC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WMATIC_TO_USDT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WMATIC_TO_WBTC_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WMATIC_TO_WETH_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WNATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkRebalance",
    values: [AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaluniRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRate",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRateToEth",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rates",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      AddressLike[],
      BigNumberish[],
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "USDC_TO_USDT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_TO_WBTC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_TO_WETH_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_TO_WMATIC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDT_TO_USDC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDT_TO_WBTC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDT_TO_WETH_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDT_TO_WMATIC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WBTC_TO_USDC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WBTC_TO_USDT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WBTC_TO_WETH_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WBTC_TO_WMATIC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WETH_TO_USDC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WETH_TO_USDT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WETH_TO_WBTC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WETH_TO_WMATIC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WMATIC_TO_USDC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WMATIC_TO_USDT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WMATIC_TO_WBTC_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WMATIC_TO_WETH_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WNATIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaluniRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRateToEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export interface MockRebalancer extends BaseContract {
  connect(runner?: ContractRunner | null): MockRebalancer;
  waitForDeployment(): Promise<this>;

  interface: MockRebalancerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  USDC: TypedContractMethod<[], [string], "view">;

  USDC_TO_USDT_RATE: TypedContractMethod<[], [bigint], "view">;

  USDC_TO_WBTC_RATE: TypedContractMethod<[], [bigint], "view">;

  USDC_TO_WETH_RATE: TypedContractMethod<[], [bigint], "view">;

  USDC_TO_WMATIC_RATE: TypedContractMethod<[], [bigint], "view">;

  USDT_TO_USDC_RATE: TypedContractMethod<[], [bigint], "view">;

  USDT_TO_WBTC_RATE: TypedContractMethod<[], [bigint], "view">;

  USDT_TO_WETH_RATE: TypedContractMethod<[], [bigint], "view">;

  USDT_TO_WMATIC_RATE: TypedContractMethod<[], [bigint], "view">;

  WBTC_TO_USDC_RATE: TypedContractMethod<[], [bigint], "view">;

  WBTC_TO_USDT_RATE: TypedContractMethod<[], [bigint], "view">;

  WBTC_TO_WETH_RATE: TypedContractMethod<[], [bigint], "view">;

  WBTC_TO_WMATIC_RATE: TypedContractMethod<[], [bigint], "view">;

  WETH_TO_USDC_RATE: TypedContractMethod<[], [bigint], "view">;

  WETH_TO_USDT_RATE: TypedContractMethod<[], [bigint], "view">;

  WETH_TO_WBTC_RATE: TypedContractMethod<[], [bigint], "view">;

  WETH_TO_WMATIC_RATE: TypedContractMethod<[], [bigint], "view">;

  WMATIC_TO_USDC_RATE: TypedContractMethod<[], [bigint], "view">;

  WMATIC_TO_USDT_RATE: TypedContractMethod<[], [bigint], "view">;

  WMATIC_TO_WBTC_RATE: TypedContractMethod<[], [bigint], "view">;

  WMATIC_TO_WETH_RATE: TypedContractMethod<[], [bigint], "view">;

  WNATIVE: TypedContractMethod<[], [string], "view">;

  checkRebalance: TypedContractMethod<
    [arg0: AddressLike[], arg1: BigNumberish[], arg2: BigNumberish[]],
    [boolean],
    "view"
  >;

  getBaluniRouter: TypedContractMethod<[], [string], "view">;

  getRate: TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, arg2: boolean],
    [bigint],
    "view"
  >;

  getRateToEth: TypedContractMethod<
    [fromToken: AddressLike, arg1: boolean],
    [bigint],
    "view"
  >;

  getTreasury: TypedContractMethod<[], [string], "view">;

  rates: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  rebalance: TypedContractMethod<
    [
      arg0: AddressLike[],
      arg1: BigNumberish[],
      arg2: AddressLike,
      arg3: AddressLike,
      arg4: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setRate: TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "USDC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDC_TO_USDT_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC_TO_WBTC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC_TO_WETH_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC_TO_WMATIC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDT_TO_USDC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDT_TO_WBTC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDT_TO_WETH_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDT_TO_WMATIC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WBTC_TO_USDC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WBTC_TO_USDT_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WBTC_TO_WETH_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WBTC_TO_WMATIC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH_TO_USDC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH_TO_USDT_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH_TO_WBTC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH_TO_WMATIC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WMATIC_TO_USDC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WMATIC_TO_USDT_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WMATIC_TO_WBTC_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WMATIC_TO_WETH_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WNATIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkRebalance"
  ): TypedContractMethod<
    [arg0: AddressLike[], arg1: BigNumberish[], arg2: BigNumberish[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBaluniRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRate"
  ): TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, arg2: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRateToEth"
  ): TypedContractMethod<
    [fromToken: AddressLike, arg1: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rates"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      arg0: AddressLike[],
      arg1: BigNumberish[],
      arg2: AddressLike,
      arg3: AddressLike,
      arg4: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRate"
  ): TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
