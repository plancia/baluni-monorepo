/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IBaluniV1HypervisorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBaseLiquidity"
      | "addLimitLiquidity"
      | "addLiquidity"
      | "approve"
      | "balanceOf"
      | "baseLower"
      | "baseUpper"
      | "compound(uint256[4])"
      | "compound()"
      | "currentTick"
      | "deposit"
      | "deposit0Max"
      | "deposit1Max"
      | "getBasePosition"
      | "getTotalAmounts"
      | "limitLower"
      | "limitUpper"
      | "pool"
      | "pullLiquidity(uint256,uint256[4])"
      | "pullLiquidity(int24,int24,uint128,uint256[2])"
      | "rebalance"
      | "removeWhitelisted"
      | "setFee"
      | "setWhitelist"
      | "tickSpacing"
      | "toggleDirectDeposit"
      | "token0"
      | "token1"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBaseLiquidity",
    values: [BigNumberish, BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "addLimitLiquidity",
    values: [BigNumberish, BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseLower", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseUpper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compound(uint256[4])",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "compound()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTick",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit0Max",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit1Max",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBasePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitLower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitUpper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullLiquidity(uint256,uint256[4])",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pullLiquidity(int24,int24,uint128,uint256[2])",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelisted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDirectDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLimitLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseLower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseUpper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compound(uint256[4])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compound()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit0Max",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit1Max",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limitLower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "limitUpper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullLiquidity(uint256,uint256[4])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullLiquidity(int24,int24,uint128,uint256[2])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDirectDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IBaluniV1Hypervisor extends BaseContract {
  connect(runner?: ContractRunner | null): IBaluniV1Hypervisor;
  waitForDeployment(): Promise<this>;

  interface: IBaluniV1HypervisorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBaseLiquidity: TypedContractMethod<
    [
      amount0: BigNumberish,
      amount1: BigNumberish,
      minIn: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  addLimitLiquidity: TypedContractMethod<
    [
      amount0: BigNumberish,
      amount1: BigNumberish,
      minIn: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  addLiquidity: TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish,
      inMin: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  baseLower: TypedContractMethod<[], [bigint], "view">;

  baseUpper: TypedContractMethod<[], [bigint], "view">;

  "compound(uint256[4])": TypedContractMethod<
    [inMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [
      [bigint, bigint, bigint, bigint] & {
        baseToken0Owed: bigint;
        baseToken1Owed: bigint;
        limitToken0Owed: bigint;
        limitToken1Owed: bigint;
      }
    ],
    "nonpayable"
  >;

  "compound()": TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        baseToken0Owed: bigint;
        baseToken1Owed: bigint;
        limitToken0Owed: bigint;
        limitToken1Owed: bigint;
      }
    ],
    "nonpayable"
  >;

  currentTick: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: AddressLike,
      arg3: AddressLike,
      minIn: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [bigint],
    "nonpayable"
  >;

  deposit0Max: TypedContractMethod<[], [bigint], "view">;

  deposit1Max: TypedContractMethod<[], [bigint], "view">;

  getBasePosition: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        total0: bigint;
        total1: bigint;
      }
    ],
    "view"
  >;

  getTotalAmounts: TypedContractMethod<
    [],
    [[bigint, bigint] & { total0: bigint; total1: bigint }],
    "view"
  >;

  limitLower: TypedContractMethod<[], [bigint], "view">;

  limitUpper: TypedContractMethod<[], [bigint], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  "pullLiquidity(uint256,uint256[4])": TypedContractMethod<
    [
      shares: BigNumberish,
      minAmounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        base0: bigint;
        base1: bigint;
        limit0: bigint;
        limit1: bigint;
      }
    ],
    "nonpayable"
  >;

  "pullLiquidity(int24,int24,uint128,uint256[2])": TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      shares: BigNumberish,
      amountMin: [BigNumberish, BigNumberish]
    ],
    [[bigint, bigint] & { base0: bigint; base1: bigint }],
    "nonpayable"
  >;

  rebalance: TypedContractMethod<
    [
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _limitLower: BigNumberish,
      _limitUpper: BigNumberish,
      _feeRecipient: AddressLike,
      minIn: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      outMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;

  removeWhitelisted: TypedContractMethod<[], [void], "nonpayable">;

  setFee: TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  setWhitelist: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  tickSpacing: TypedContractMethod<[], [bigint], "view">;

  toggleDirectDeposit: TypedContractMethod<[], [void], "nonpayable">;

  token0: TypedContractMethod<[], [string], "view">;

  token1: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBaseLiquidity"
  ): TypedContractMethod<
    [
      amount0: BigNumberish,
      amount1: BigNumberish,
      minIn: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLimitLiquidity"
  ): TypedContractMethod<
    [
      amount0: BigNumberish,
      amount1: BigNumberish,
      minIn: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish,
      inMin: [BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseLower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseUpper"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "compound(uint256[4])"
  ): TypedContractMethod<
    [inMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [
      [bigint, bigint, bigint, bigint] & {
        baseToken0Owed: bigint;
        baseToken1Owed: bigint;
        limitToken0Owed: bigint;
        limitToken1Owed: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "compound()"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        baseToken0Owed: bigint;
        baseToken1Owed: bigint;
        limitToken0Owed: bigint;
        limitToken1Owed: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentTick"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: AddressLike,
      arg3: AddressLike,
      minIn: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit0Max"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit1Max"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBasePosition"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        total0: bigint;
        total1: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalAmounts"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { total0: bigint; total1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "limitLower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "limitUpper"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pullLiquidity(uint256,uint256[4])"
  ): TypedContractMethod<
    [
      shares: BigNumberish,
      minAmounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [
      [bigint, bigint, bigint, bigint] & {
        base0: bigint;
        base1: bigint;
        limit0: bigint;
        limit1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pullLiquidity(int24,int24,uint128,uint256[2])"
  ): TypedContractMethod<
    [
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      shares: BigNumberish,
      amountMin: [BigNumberish, BigNumberish]
    ],
    [[bigint, bigint] & { base0: bigint; base1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _limitLower: BigNumberish,
      _limitUpper: BigNumberish,
      _feeRecipient: AddressLike,
      minIn: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      outMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeWhitelisted"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tickSpacing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "toggleDirectDeposit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  filters: {};
}
