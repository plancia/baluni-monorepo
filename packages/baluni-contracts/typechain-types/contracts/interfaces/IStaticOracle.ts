/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IStaticOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CARDINALITY_PER_MINUTE"
      | "UNISWAP_V3_FACTORY"
      | "addNewFeeTier"
      | "getAllPoolsForPair"
      | "isPairSupported"
      | "prepareAllAvailablePoolsWithCardinality"
      | "prepareAllAvailablePoolsWithTimePeriod"
      | "prepareSpecificFeeTiersWithCardinality"
      | "prepareSpecificFeeTiersWithTimePeriod"
      | "prepareSpecificPoolsWithCardinality"
      | "prepareSpecificPoolsWithTimePeriod"
      | "quoteAllAvailablePoolsWithTimePeriod"
      | "quoteSpecificFeeTiersWithTimePeriod"
      | "quoteSpecificPoolsWithTimePeriod"
      | "supportedFeeTiers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CARDINALITY_PER_MINUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_V3_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNewFeeTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPoolsForPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPairSupported",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareAllAvailablePoolsWithCardinality",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareAllAvailablePoolsWithTimePeriod",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareSpecificFeeTiersWithCardinality",
    values: [AddressLike, AddressLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareSpecificFeeTiersWithTimePeriod",
    values: [AddressLike, AddressLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareSpecificPoolsWithCardinality",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareSpecificPoolsWithTimePeriod",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAllAvailablePoolsWithTimePeriod",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSpecificFeeTiersWithTimePeriod",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSpecificPoolsWithTimePeriod",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedFeeTiers",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CARDINALITY_PER_MINUTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_V3_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPoolsForPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPairSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareAllAvailablePoolsWithCardinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareAllAvailablePoolsWithTimePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareSpecificFeeTiersWithCardinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareSpecificFeeTiersWithTimePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareSpecificPoolsWithCardinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareSpecificPoolsWithTimePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteAllAvailablePoolsWithTimePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSpecificFeeTiersWithTimePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSpecificPoolsWithTimePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedFeeTiers",
    data: BytesLike
  ): Result;
}

export interface IStaticOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IStaticOracle;
  waitForDeployment(): Promise<this>;

  interface: IStaticOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CARDINALITY_PER_MINUTE: TypedContractMethod<[], [bigint], "view">;

  UNISWAP_V3_FACTORY: TypedContractMethod<[], [string], "view">;

  addNewFeeTier: TypedContractMethod<
    [feeTier: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllPoolsForPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string[]],
    "view"
  >;

  isPairSupported: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [boolean],
    "view"
  >;

  prepareAllAvailablePoolsWithCardinality: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, cardinality: BigNumberish],
    [string[]],
    "nonpayable"
  >;

  prepareAllAvailablePoolsWithTimePeriod: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, period: BigNumberish],
    [string[]],
    "nonpayable"
  >;

  prepareSpecificFeeTiersWithCardinality: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      feeTiers: BigNumberish[],
      cardinality: BigNumberish
    ],
    [string[]],
    "nonpayable"
  >;

  prepareSpecificFeeTiersWithTimePeriod: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      feeTiers: BigNumberish[],
      period: BigNumberish
    ],
    [string[]],
    "nonpayable"
  >;

  prepareSpecificPoolsWithCardinality: TypedContractMethod<
    [pools: AddressLike[], cardinality: BigNumberish],
    [void],
    "nonpayable"
  >;

  prepareSpecificPoolsWithTimePeriod: TypedContractMethod<
    [pools: AddressLike[], period: BigNumberish],
    [void],
    "nonpayable"
  >;

  quoteAllAvailablePoolsWithTimePeriod: TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      period: BigNumberish
    ],
    [[bigint, string[]] & { quoteAmount: bigint; queriedPools: string[] }],
    "view"
  >;

  quoteSpecificFeeTiersWithTimePeriod: TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      feeTiers: BigNumberish[],
      period: BigNumberish
    ],
    [[bigint, string[]] & { quoteAmount: bigint; queriedPools: string[] }],
    "view"
  >;

  quoteSpecificPoolsWithTimePeriod: TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      pools: AddressLike[],
      period: BigNumberish
    ],
    [bigint],
    "view"
  >;

  supportedFeeTiers: TypedContractMethod<[], [bigint[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CARDINALITY_PER_MINUTE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UNISWAP_V3_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addNewFeeTier"
  ): TypedContractMethod<[feeTier: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllPoolsForPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPairSupported"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "prepareAllAvailablePoolsWithCardinality"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, cardinality: BigNumberish],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareAllAvailablePoolsWithTimePeriod"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, period: BigNumberish],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareSpecificFeeTiersWithCardinality"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      feeTiers: BigNumberish[],
      cardinality: BigNumberish
    ],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareSpecificFeeTiersWithTimePeriod"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      feeTiers: BigNumberish[],
      period: BigNumberish
    ],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareSpecificPoolsWithCardinality"
  ): TypedContractMethod<
    [pools: AddressLike[], cardinality: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "prepareSpecificPoolsWithTimePeriod"
  ): TypedContractMethod<
    [pools: AddressLike[], period: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quoteAllAvailablePoolsWithTimePeriod"
  ): TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      period: BigNumberish
    ],
    [[bigint, string[]] & { quoteAmount: bigint; queriedPools: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteSpecificFeeTiersWithTimePeriod"
  ): TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      feeTiers: BigNumberish[],
      period: BigNumberish
    ],
    [[bigint, string[]] & { quoteAmount: bigint; queriedPools: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteSpecificPoolsWithTimePeriod"
  ): TypedContractMethod<
    [
      baseAmount: BigNumberish,
      baseToken: AddressLike,
      quoteToken: AddressLike,
      pools: AddressLike[],
      period: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportedFeeTiers"
  ): TypedContractMethod<[], [bigint[]], "view">;

  filters: {};
}
