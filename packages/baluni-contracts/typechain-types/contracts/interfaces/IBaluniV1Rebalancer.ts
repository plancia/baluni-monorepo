/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IBaluniV1Rebalancer {
  export type RebalanceVarsStruct = {
    length: BigNumberish;
    totalValue: BigNumberish;
    finalUsdBalance: BigNumberish;
    overweightVaultsLength: BigNumberish;
    underweightVaultsLength: BigNumberish;
    totalActiveWeight: BigNumberish;
    amountOut: BigNumberish;
    overweightVaults: BigNumberish[];
    overweightAmounts: BigNumberish[];
    underweightVaults: BigNumberish[];
    underweightAmounts: BigNumberish[];
    balances: BigNumberish[];
  };

  export type RebalanceVarsStructOutput = [
    length: bigint,
    totalValue: bigint,
    finalUsdBalance: bigint,
    overweightVaultsLength: bigint,
    underweightVaultsLength: bigint,
    totalActiveWeight: bigint,
    amountOut: bigint,
    overweightVaults: bigint[],
    overweightAmounts: bigint[],
    underweightVaults: bigint[],
    underweightAmounts: bigint[],
    balances: bigint[]
  ] & {
    length: bigint;
    totalValue: bigint;
    finalUsdBalance: bigint;
    overweightVaultsLength: bigint;
    underweightVaultsLength: bigint;
    totalActiveWeight: bigint;
    amountOut: bigint;
    overweightVaults: bigint[];
    overweightAmounts: bigint[];
    underweightVaults: bigint[];
    underweightAmounts: bigint[];
    balances: bigint[];
  };
}

export interface IBaluniV1RebalancerInterface extends Interface {
  getFunction(
    nameOrSignature: "checkRebalance" | "convert" | "rebalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkRebalance",
    values: [
      BigNumberish[],
      AddressLike[],
      BigNumberish[],
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      BigNumberish[],
      AddressLike[],
      BigNumberish[],
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
}

export interface IBaluniV1Rebalancer extends BaseContract {
  connect(runner?: ContractRunner | null): IBaluniV1Rebalancer;
  waitForDeployment(): Promise<this>;

  interface: IBaluniV1RebalancerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkRebalance: TypedContractMethod<
    [
      balances: BigNumberish[],
      assets: AddressLike[],
      weights: BigNumberish[],
      limit: BigNumberish,
      sender: AddressLike,
      baseAsset: AddressLike
    ],
    [IBaluniV1Rebalancer.RebalanceVarsStructOutput],
    "view"
  >;

  convert: TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  rebalance: TypedContractMethod<
    [
      balances: BigNumberish[],
      assets: AddressLike[],
      weights: BigNumberish[],
      limit: BigNumberish,
      sender: AddressLike,
      receiver: AddressLike,
      baseAsset: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkRebalance"
  ): TypedContractMethod<
    [
      balances: BigNumberish[],
      assets: AddressLike[],
      weights: BigNumberish[],
      limit: BigNumberish,
      sender: AddressLike,
      baseAsset: AddressLike
    ],
    [IBaluniV1Rebalancer.RebalanceVarsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "convert"
  ): TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      balances: BigNumberish[],
      assets: AddressLike[],
      weights: BigNumberish[],
      limit: BigNumberish,
      sender: AddressLike,
      receiver: AddressLike,
      baseAsset: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
